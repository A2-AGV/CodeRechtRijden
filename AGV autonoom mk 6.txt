
#include <avr/io.h>
#include <avr/interrupt.h>
#include <util/delay.h>

//<<<<<Sensoren & Schakelaren>>>>>

#define Reset_Start (PINB & (1<<PB0)) //inverse (bij indrukking spanning laag)
#define Nstop (PINB & (1<<PB1))

//Infrarood (inverse)

#define Infra_L (PINL & (1<<PL4))
#define Infra_R (PINL & (1<<PL2))

//<<<<<Actuatoren & LED's>>>>>

//IN pinnen motordriver

//motor rechts
#define IN1_R PORTG |= (1<<PG0)
#define NOT_IN1_R PORTG &= ~(1<<PG0)
#define IN2_R PORTL |= (1<<PL6)
#define NOT_IN2_R PORTL &= ~(1<<PL6)

//motor links

#define IN1_L PORTC |= (1<<PC0)
#define NOT_IN1_L PORTC &= ~(1<<PC0)
#define IN2_L PORTG |= (1<<PG2)
#define NOT_IN2_L PORTG &= ~(1<<PG2)

//LED's

#define LED_L_AAN PORTC &= ~(1<<PC2)
#define LED_L_UIT PORTC |= (1<<PC2)

#define LED_R_AAN PORTC &= ~(1<<PC3)
#define LED_R_UIT PORTC |= (1<<PC3)

//Trigger en echo pins
#define Trigger_pin PB4
#define eco_pin PL0
#define Trigger_pin2 PB5
#define eco_pin2 PL1

//<<<<<constanten>>>>>
#define draaisnelheid  0.100 //grad/ms
#define snelheid 0.125 //mm/ms


long counter;
int distance;
int OverflowCounter = 0;
int OverflowCounter2 = 0;
int distance2;
long counter2;
int permission = 1;
long teller = 0;
const float speed = snelheid;
const int arcspeed = draaisnelheid;
int space = 0;
int plaats = 50; // in procenten (vanaf linkerkant)
long ReferentieTijd = 0;
int plaatscorrectie = 0;
int hoekcorrectie = 0;
int Tcapture = 0;
int TcaptureTrig = 1;
int Wcapture = 0;
int WcaptureTrig = 1;
float hoekRad = 0;
float hoekGrad = 0;
int minimalePuls = 1000; //in ms
int richting = 0; //1 = naar links 0 = neutraal 2 = naar rechts
int draaitijd = 0; //in ms



ISR(TIMER4_OVF_vect)
{
OverflowCounter++;
}
ISR(TIMER5_OVF_vect)
{
OverflowCounter2++;
}



inittimer()
{
TCCR4A = 0;
TCCR5A = 0;

TIMSK4 = (1 << TOIE4);
TIMSK5 = (1 << TOIE5);
sei();
}



void ultrasoon1()
{
    PORTB |= (1 << Trigger_pin);
_delay_us(10);
PORTB &= (~(1 << Trigger_pin));

TCNT4 = 0;
TCCR4B = 0x41;
TIFR4 = 1<<ICF4;
TIFR4 = 1<<TOV4;

while ((TIFR4 & (1 << ICF4)) == 0);
TCNT4 = 0;
TCCR4B = 0x01;
TIFR4 = 1<<ICF4;
TIFR4 = 1<<TOV4;
OverflowCounter = 0;

while ((TIFR4 & (1 << ICF4)) == 0);
counter = ICR4 + (65535 * OverflowCounter);
distance = (double)counter/932.94;
distance = distance - 2;


return (0);
}



void ultrasoon2()
{
 PORTB |= (1 << Trigger_pin2);
    _delay_us(10);
    PORTB &= (~(1 << Trigger_pin2));

    TCNT5 = 0;
    TCCR5B = 0x41;
    TIFR5 = 1<<ICF5;
    TIFR5 = 1<<TOV5;

    while ((TIFR5 & (1 << ICF5)) == 0);
    TCNT5 = 0;
    TCCR5B = 0x01;
    TIFR5 = 1<<ICF5;
    TIFR5 = 1<<TOV5;
    OverflowCounter2 = 0;

    while ((TIFR5 & (1 << ICF5)) == 0);
    counter2 = ICR5 + (65535 * OverflowCounter2);
    distance2 = (double)counter2/932.94;
    distance2 = distance2 - 2;
}

void Toggle_Nstop()
{
    while (Nstop)
    {
        if (!Nstop)
    {
        permission = 1 - permission;
    }
    }
    return(0);
}

void Vooruit()
{
    IN1_R;
    IN2_L;
    NOT_IN2_R;
    NOT_IN1_L;

    return(0);
}

void Achteruit()
{
    NOT_IN1_R;
    NOT_IN2_L;
    IN2_R;
    IN1_L;

    return(0);
}

void Linksom()
{
    NOT_IN2_L;
    NOT_IN2_R;
    IN1_L;
    IN1_R;

    return(0);
}

void Rechtsom()
{
    IN2_L;
    IN2_R;
    NOT_IN1_L;
    NOT_IN1_R;

    return(0);
}

void Rem()
{
    IN1_L;
    IN1_R;
    IN2_L;
    IN2_R;

    return(0);
}

void Spacing()
{
    space = distance + distance2;

    return(0);
}

void Locator()
{
    plaats = (100/space)*distance;
    if((plaats < 20) || (plaats > 80))
    {
       plaatscorrectie = 50;
    }
    else
    {
        plaatscorrectie = 0;
    }
    return(0);
}
void Toggle_LED()
{
    if(permission == 0)
    {
        LED_L_AAN;
        LED_R_AAN;
    }
    else
    {
        LED_L_UIT;
        LED_R_UIT;
    }

    return(0);
}

void WTcapture()
{
    if (TcaptureTrig == 1)
    {
        Tcapture = teller;
        TcaptureTrig = 0;
    }
    if (WcaptureTrig == 1)
    {
        Wcapture = distance;
        WcaptureTrig = 0;
    }

    return(0);
}

void HoekOnator()
{
        ultrasoon1();
        ultrasoon2();

        int Wverschil = abs(Wcapture - distance);

        switch(Wverschil)
        {
        case 1:
            hoekcorrectie = 45;
            break;

        case 2:
            hoekcorrectie = 90;
            break;

        case 3:
            hoekcorrectie = 135;
            break;

        case 4:
            hoekcorrectie = 180;
            break;

        case 5:
            hoekcorrectie = 225;
           break;

        case 6:
            hoekcorrectie = 270;
            break;

        case 7:
            hoekcorrectie = 315;
            break;

        case 8:
            hoekcorrectie = 360;
            break;

        case 9:
            hoekcorrectie = 405;
            break;

        default:
            hoekcorrectie = 0;
            break;
        }




    return(0);

}

void RichtingOnator()
{


            if(distance > Tcapture)
            {
                richting = 1;
            }
            else
            {
                richting = 2;
            }



    return(0);
}

void ShortArc (int t)
{
    if (t == 2)
    {
        Rechtsom();
    }

    if (t == 1)
    {
        Linksom();
    }

    return(0);

}

void ArcCompActuator()
{
    if ((abs(Wcapture-distance)) > 1)
    {

            Rem();
            _delay_ms(250);

                Rechtsom();
                _delay_ms(plaatscorrectie + hoekcorrectie);
                Rem();
                _delay_ms(250);
                Vooruit();

            TcaptureTrig = 1;
            WcaptureTrig = 1;
            teller = -20;
    }

    return(0);

}


int main()
{
    DDRB = 0xF0;
    DDRL = 0x40;
    DDRG = 0xFF;
    DDRC = 0xFF;

    LED_L_UIT;
    LED_R_UIT;

//    while(!(Reset_Start));


    inittimer();

while (1)
{
    ultrasoon1();
    ultrasoon2();

  //  Toggle_Nstop(); //zet op basis van de noodstop permission op 1 of 0
  //  Toggle_LED();
    if ((distance < 10)&&(distance2 <10)&&(permission == 1)) //het doorlopen van het "rechtrijden programma"
        {
        Vooruit();
        Spacing(); //meet de totale ruimte dat naast de AGV beschikbaar is
        Locator(); //Rekent in procenten uit op welke plek de agv zich bevindt
        WTcapture(); //slaat een tijd/afstand referentie op dat gebruikt wordt voor het bepalen van de hoek
        if(teller >= 1000)
        {
        HoekOnator(); //Bepaald het te verdraaien hoek
        RichtingOnator(); //Bepaald het in te draaien richting
        ArcCompActuator(); //aansturing van de correctieverdraaiing
        }
        }
        else
        {
            Rem();
        }
    _delay_ms(20);

    teller = teller + 20;
}
//Dit is een test voor github changes
return 0;
}
